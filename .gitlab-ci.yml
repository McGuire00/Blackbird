# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  MAVERICK_IMAGE_NAME: registry.gitlab.com/mcguire001/blackbird/maverick
  BLACKBIRD_IMAGE_NAME: registry.gitlab.com/mcguire001/blackbird/blackbird

image:            # Official docker compose image.
  name: docker:latest

services:
  - docker:dind

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-front-end:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Building Frontend..."
    - docker build -t $MAVERICK_IMAGE_NAME ./maverick
    - docker push $MAVERICK_IMAGE_NAME

build-back-end:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Building Backend..."
    - docker build -t $BLACKBIRD_IMAGE_NAME ./blackbird
    - docker push $BLACKBIRD_IMAGE_NAME

font-end-test:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
#  image: maverick-maverick
  script:
    - echo "Pulling Frontend Image..."
    - docker pull $MAVERICK_IMAGE_NAME:latest
    - echo "Running unit tests..."
    - npm test-all

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
